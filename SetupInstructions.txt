BillowAgent - Building instructions

1. Create the project:
	1.1 Download .NET 8: https://dotnet.microsoft.com/en-us/download/visual-studio-sdks
	1.2 Navigate to project folder and run 
		# Create WinForms app targeting .NET 8 (ensures message loop for WinEvent hook)
		dotnet new winforms -n BillowAgent -f net8.0
		cd BillowAgent
	1.3 Add packages
		dotnet add package Microsoft.Data.Sqlite --version 8.*
		dotnet add package Dapper --version 2.*
		dotnet add package Microsoft.Graph --version 5.*
		dotnet add package Azure.Identity --version 1.*

	1.4 (Optional) For JSON opts
		dotnet add package System.Text.Json --version 8.*

	1.5 Edit the .csproj to ensure Windows-specific features are enabled:
		<!-- TimeAgent/TimeAgent.csproj -->
	  	  <Project Sdk="Microsoft.NET.Sdk.WindowsDesktop">
	    	    <PropertyGroup>
	    	    <OutputType>WinExe</OutputType>
	    	    <TargetFramework>net8.0-windows</TargetFramework>
	    	    <UseWindowsForms>true</UseWindowsForms>
	    	    <Nullable>enable</Nullable>
	    	    <ImplicitUsings>enable</ImplicitUsings>
	    	    <AssemblyName>TimeAgent</AssemblyName>
	  	  </PropertyGroup>
		</Project>

2. Configuration:
	2.1 Add file in BillowAgent/appsettings.json:
	// TimeAgent/appsettings.json
	  {
	  "Database": {
	    "Path": "%APPDATA%/TimeAgent/timeagent.db"
	  },
	  "WebSocket": {
	    "Prefix": "http://localhost:57451/ws/"
	  },
	  "Rules": {
	    "MinFocusSeconds": 15,
	    "MergeGapSeconds": 120,
	    "IdleThresholdSeconds": 240
	  },
	  "Graph": {
	    "TenantId": "common",
	    "ClientId": "!!ID_HERE!!",
	    "Scopes": ["User.Read", "Calendars.Read", "Presence.Read"]
	  }
	}
	
	2.2 Register an Azure Entra App (Public client / Mobile & desktop) and copy its Application (client) ID here


3. Create C# files:
3.1 BillowAgent/Program.cs
using System;
using System.IO;
using System.Text.Json;
using System.Windows.Forms;


namespace TimeAgent;


internal static class Program
{
[STAThread]
static void Main()
{
ApplicationConfiguration.Initialize();


// Load config
var cfgPath = Path.Combine(AppContext.BaseDirectory, "appsettings.json");
var json = File.ReadAllText(cfgPath);
var config = JsonSerializer.Deserialize<AppConfig>(json)!;
config.ResolveEnvVars();


// Initialize storage (creates DB + tables + seed rules if needed)
var storage = new Storage(config.Database.Path);
storage.Initialize();


// Compose services
var rules = new RulesEngine(storage);
var idle = new IdleMonitor(TimeSpan.FromSeconds(config.Rules.IdleThresholdSeconds));
var browser = new BrowserServer(config.WebSocket.Prefix, storage);
var sessionizer = new Sessionizer(storage, rules, config);
var graph = new GraphService(config.Graph);


// WinEvent hook -> records foreground changes
var winHook = new WinEventHook(storage, idle, sessionizer);


Application.Run(new TrayAppContext(storage, winHook, idle, browser, graph));


// Clean up
winHook.Dispose();
browser.Dispose();
}
}

3.2 BillowAgent/TrayAppContext.cs:
using System;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Windows.Forms;


namespace TimeAgent;


public class TrayAppContext : ApplicationContext
{
private readonly NotifyIcon _tray;
private readonly Storage _storage;
private readonly WinEventHook _hook;
private readonly IdleMonitor _idle;
private readonly BrowserServer _browser;
private readonly GraphService _graph;
private bool _paused;


public TrayAppContext(Storage storage, WinEventHook hook, IdleMonitor idle, BrowserServer browser, GraphService graph)
{
_storage = storage; _hook = hook; _idle = idle; _browser = browser; _graph = graph;


_tray = new NotifyIcon
{
Text = "TimeAgent",
Visible = true,
Icon = SystemIcons.Application
};


var menu = new ContextMenuStrip();
menu.Items.Add("Pause Tracking", null, (_,__) => TogglePause());
menu.Items.Add("Sync Calendar Now", null, async (_,__) => await SyncCalendar());
menu.Items.Add("Open DB Folder", null, (_,__) => Process.Start("explorer.exe", _storage.DbDirectory));
menu.Items.Add("Exit", null, (_,__) => ExitThread());
_tray.ContextMenuStrip = menu;


_browser.Start();
_hook.Start();
_idle.Start();
// Optional: kickoff background calendar sync
_ = SyncCalendar();
}


private void TogglePause()
{
_paused = !_paused;
_hook.Paused = _paused;
_idle.Paused = _paused;
_tray.BalloonTipTitle = _paused ? "Tracking paused" : "Tracking resumed";
_tray.ShowBalloonTip(1500);
((ToolStripMenuItem)_tray.ContextMenuStrip!.Items[0]).Text = _paused ? "Resume Tracking" : "Pause Tracking";
}


private async Task SyncCalendar()
{
try
{
var windows = await _graph.GetTodaysOnlineMeetingWindowsUtc();
_storage.UpsertMeetingWindows(windows);
_tray.BalloonTipTitle = $"Synced {windows.Count} meeting windows";
_tray.ShowBalloonTip(1500);
}

4. To avoid failing with Exit Code 1, we run below in Powershell as administrator:
netsh http add urlacl url=http://localhost:57451/ws/ user=$env:Elissa
To remove that, run:
netsh http delete urlacl url=http://localhost:57451/ws/

